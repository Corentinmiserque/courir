<template>
    <div>
      <p>L'ID récupéré de la route est : {{ id }}</p>
      <RouterView />
      <div v-if="daySequences && daySequences.length">
        <h3>Séquence pour le jour {{ id }}</h3>
        <div v-show="!currentSequence.finished">
          {{ currentSequence.type }} - {{ currentSequence.time }} minutes
          <div v-if="activeSequenceIndex === activeSequenceIndex">
            Temps restant : {{ formatTime(timeRemaining) }}
          </div>
        </div>
  
        <button @click="toggleTimer">{{ timer ? 'Pause' : 'Reprendre' }}</button>
        <button @click="startTimerIfNotStarted">start</button>

        <button>Abandonné</button>
      </div>
    </div>
  </template>
  
  <script setup>
  import { ref, onMounted, onBeforeUnmount } from 'vue';
  import { useRoute } from 'vue-router';
  import { useProgramStore } from '@/stores/programs';
  
  const route = useRoute();
  const id = ref(route.params.id);
  
  const programStore = useProgramStore();
  const daySequences = ref([]);
  const activeSequenceIndex = ref(0);
  const timeRemaining = ref(0);
  let timer;
  const currentSequence = ref({});
  
  const formatTime = (seconds) => {
    const minutes = Math.floor(seconds / 60);
    const secondsRemaining = seconds % 60;
    return `${minutes}:${secondsRemaining < 10 ? '0' : ''}${secondsRemaining}`;
  };
  
  programStore.updateLocalStorage();
  
  const pauseTimer = () => {
    clearInterval(timer);
    timer = null;
  };
  
  const toggleTimer = () => {
    if (timer) {
      // Si le minuteur est en cours, mettez-le en pause
      pauseTimer();
    } else {
      // Si le minuteur est en pause, reprenez-le
      const currentSequence = daySequences.value[activeSequenceIndex.value];
      if (currentSequence && !currentSequence.finished) {
        startTimer(currentSequence.time, timeRemaining.value);
      }
    }
  };
  
  const startTimerIfNotStarted = () => {
    // Commencez le minuteur uniquement si ce n'est pas déjà en cours
    if (!timer) {
      const currentSequence = daySequences.value[activeSequenceIndex.value];
      if (currentSequence && !currentSequence.finished) {
        startTimer(currentSequence.time);
      }
    }
  };
  
  const startTimer = (duration, savedTime = 0) => {
    timeRemaining.value = savedTime > 0 ? savedTime : duration * 60;
    timer = setInterval(() => {
      timeRemaining.value--;
      if (timeRemaining.value <= 0) {
        clearInterval(timer);
        // Mettre à jour la séquence spécifique dans le store avec finished=true
        programStore.finishSequence(id.value, activeSequenceIndex.value);
      }
    }, 1000);
  };
  
  onMounted(() => {
    daySequences.value = programStore.getDaySequences(id.value);
  
    if (daySequences.value.length > 0) {
      activeSequenceIndex.value = 0;
      const firstSequence = daySequences.value[activeSequenceIndex.value];
      currentSequence.value = firstSequence;
      if (!firstSequence.finished) {
        // Ne commencez pas le minuteur ici, attendez le clic sur "Start"
      }
    }
  });
  
  onBeforeUnmount(() => {
    // Assurez-vous d'effacer le minuteur lors de la destruction du composant
    clearInterval(timer);
    // Mettre à jour le localStorage avant la destruction du composant
    programStore.updateLocalStorage();
  });
  </script>
  
  
  